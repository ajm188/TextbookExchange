require 'open-uri'
require 'nokogiri'
require_relative 'amazon_book_scraper'

class Book < ActiveRecord::Base
	belongs_to :user
	after_create :scrape_amazon

	DEPARTMENTS = [
		"ACCT",
		"ACES",
		"ADHT",
		"ADVC",
		"AIOM",
		"AMST",
		"ANAT",
		"ANES",
		"ANTH",
		"APMU",
		"ARAB",
		"ARSC",
		"ARTH",
		"ARTK",
		"ARTS",
		"ASCV",
		"ASIA",
		"ASTR",
		"BAFI",
		"BASC",
		"BETH",
		"BIOC",
		"BIOL",
		"BIOM",
		"BIOS",
		"BLAW",
		"BSTP",
		"CARD",
		"CBIO",
		"CFNU",
		"CHEM",
		"CHIN",
		"CHST",
		"CIAR",
		"CLBY",
		"CLIN",
		"CLMI",
		"CLSC",
		"CMED",
		"CMPL",
		"CMPS",
		"CNCR",
		"COGS",
		"COLS",
		"COMP",
		"COOP",
		"COPE",
		"CORE",
		"COSI",
		"CRSP",
		"DANC",
		"DART",
		"DENC",
		"DEND",
		"DENF",
		"DENT",
		"DERM",
		"DGMS",
		"DMLL",
		"DNDO",
		"DPED",
		"DPER",
		"DPHC",
		"DRTH",
		"DSPR",
		"DSRE",
		"EBME",
		"ECHE",
		"ECIV",
		"ECMP",
		"ECON",
		"EDJC",
		"EDMP",
		"EDUC",
		"EEAP",
		"EECS",
		"EEPS",
		"EFDA",
		"EFTS",
		"EIND",
		"EMAC",
		"EMAE",
		"EMBA",
		"EMCH",
		"EMMD",
		"EMMS",
		"EMSE",
		"ENDO",
		"ENG",
		"ENGD",
		"ENGL",
		"ENGR",
		"ENTP",
		"EPBI",
		"EPOM",
		"ERAS",
		"ERTH",
		"ESAD",
		"ESCI",
		"ESMD",
		"ESTD",
		"ESYS",
		"ETHC",
		"ETHS",
		"EVHS",
		"EXAM",
		"EXCH",
		"FAMD",
		"FRCH",
		"FRSS",
		"FSCC",
		"FSCS",
		"FSNA",
		"FSSO",
		"FSSY",
		"FSTS",
		"FUND",
		"GAST",
		"GENE",
		"GEOG",
		"GEOL",
		"GERI",
		"GERM",
		"GERO",
		"GMBA",
		"GRAD",
		"GREK",
		"GRMN",
		"GTOX",
		"HBRW",
		"HDEV",
		"HEAL",
		"HEMA",
		"HEWB",
		"HLTH",
		"HSED",
		"HSMC",
		"HSST",
		"HSTY",
		"HUMN",
		"HWDP",
		"IBIS",
		"IBMS",
		"IDHS",
		"IDRL",
		"IECS",
		"IIME",
		"IMED",
		"IMMU",
		"INCA",
		"INQU",
		"INTH",
		"INTL",
		"IPOD",
		"ITAL",
		"ITAM",
		"JAPN",
		"JDST",
		"JRAB",
		"LAPP",
		"LATN",
		"LAWS",
		"LCAN",
		"LDRS",
		"LHRP",
		"LIBS",
		"LING",
		"LINS",
		"LITR",
		"LLM",
		"LMON",
		"LSAB",
		"LYON",
		"MAHE",
		"MANC",
		"MAND",
		"MATH",
		"MBAC",
		"MBAP",
		"MBIO",
		"MEDS",
		"MEDT",
		"MGAB",
		"MGMT",
		"MIDS",
		"MILT",
		"MISC",
		"MKMR",
		"MLIT",
		"MLSC",
		"MMED",
		"MONT",
		"MPHP",
		"MPOD",
		"MRKM",
		"MSFC",
		"MSFI",
		"MSOR",
		"MSPL",
		"MSTP",
		"MUAP",
		"MUAR",
		"MUCP",
		"MUDE",
		"MUED",
		"MUEN",
		"MUGN",
		"MUHI",
		"MULI",
		"MUPD",
		"MUPM",
		"MURP",
		"MUSC",
		"MUSD",
		"MUTH",
		"MVIR",
		"NEUM",
		"NEUR",
		"NEUS",
		"NORG",
		"NTRN",
		"NUAN",
		"NUED",
		"NUND",
		"NUNI",
		"NUNP",
		"NURS",
		"OBGY",
		"OPMT",
		"OPRE",
		"OPTH",
		"ORBH",
		"ORTH",
		"OTHR",
		"OTOL",
		"PATH",
		"PEDS",
		"PHED",
		"PHIL",
		"PHOL",
		"PHRM",
		"PHYS",
		"PLCY",
		"PORT",
		"POSC",
		"PRAC",
		"PSCL",
		"PSYC",
		"PSYY",
		"PULM",
		"QUMM",
		"RADI",
		"RBIO",
		"READ",
		"REHA",
		"REHE",
		"REMA",
		"RENL",
		"RESC",
		"RHEU",
		"RLGN",
		"RSCH",
		"RUSN",
		"SASS",
		"SIDS",
		"SJUS",
		"SMAB",
		"SOCI",
		"SPAN",
		"SPCH",
		"SPPP",
		"SRAB",
		"SRCH",
		"SSBT",
		"SSCI",
		"SSWM",
		"STAT",
		"SURG",
		"SWBC",
		"SYBB",
		"SYPS",
		"TELA",
		"THTR",
		"UCAP",
		"UGSP",
		"UNEL",
		"UNIV",
		"URES",
		"UROL",
		"USEM",
		"USFS",
		"USNA",
		"USSO",
		"USSY",
		"VACA",
		"WASH",
		"WGST",
		"WHUK",
		"WIEN",
		"WLIT",
		"WMST",
		"WSTD"
	]

	CONDITIONS = [
		"New",
		"Used - Like New",
		"Used - Very Good",
		"Used - Good",
		"Used - Acceptable",
		"Used - Poor"
	]


	def preview
		title.truncate(30)
	end

	def course
		"#{dept} #{course_num}"
	end

	private

	def scrape_amazon
		return if amazon_url.blank?

		isbn_10 = ""
		isbn_13 = ""
		publisher = ""
		edition = ""
		title = ""
		author = ""
		img_url = ""

		begin
			url = amazon_url.gsub(/ref=.*/, "")
			page = Nokogiri::HTML(open(url)) 
			h2 = page.xpath("//h2[text()='Product Details']").first()
			info_div = h2.next_element()
			isbn_10 =  get_attr(info_div, "ISBN-10")
			isbn_13 =  get_attr(info_div, "ISBN-13")
			publisher_edition = get_attr(info_div, "Publisher")
			publisher, edition = parse_publisher(publisher_edition)
			title = page.xpath('//span[@id="btAsinTitle"]').text
			author = AmazonBookScraper::author(page) # use the AmazonBookScraper to get the author
			img_url = page.xpath('//img[@id="main-image"]').first.attributes['src'].value
		rescue Exception
		ensure
			self.update_attributes(
				:title => title,
				:publisher => publisher,
				:edition => edition,
				:author => author,
				:isbn_10 => isbn_10,
				:isbn_13 => isbn_13,
				:img_url => img_url
			)
		end
	end

	def get_attr(div, attribute)
		title_nodes = div.search("b[text()='#{attribute}:']")
		title = title_nodes ? title_nodes.first : nil
		text = title ? title.next.text[1..-1] : nil
	end

	def parse_publisher(publisher_edition)
		publisher_node = publisher_edition.match(/^(.*);/)
		edition_node = publisher_edition.match(/;\s(\w*)/)
		publisher = publisher_node && publisher_node.length >= 2 ? publisher_node[1] : nil
		edition = edition_node && edition_node.length >= 2 ? edition_node[1] : nil
		return publisher, edition
	end

end
